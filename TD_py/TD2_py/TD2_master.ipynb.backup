{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.2"
    },
    "colab": {
      "name": "TD2_master.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1qHm9SFjoomg"
      },
      "source": [
        "$\\newcommand\\E{{\\mathbf E}}$\n",
        "$\\newcommand\\indi[1]{{\\mathbf 1}_{\\displaystyle #1}}$\n",
        "$\\newcommand\\inde[1]{{\\mathbf 1}_{\\displaystyle\\left\\{ #1 \\right\\}}}$\n",
        "$\\newcommand{\\ind}{\\inde}$\n",
        "$\\newcommand\\P{{\\mathbf P}}$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nsv2EPsfYc3z"
      },
      "source": [
        "# **<center>Décision dans l'incertain: </center>**\n",
        "\n",
        "\n",
        "## <center> Test d'équirépartition, Calcul de prix </center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GtjsPcHLYH0P"
      },
      "source": [
        "<table class=\"tfo-notebook-buttons\" align=\"center\">\n",
        "  <td>\n",
        "    <a target=\"_blank\" href=\"https://cermics.enpc.fr/~bl/decision-incertain/index.html\">\n",
        "    <img src=\"https://drive.google.com/uc?export=view&id=1imN5f8xXJGvsFT7nsFiFfg-Uk4y3sxgo\" width=\"60\" height=\"70\"/>\n",
        "    Page du cours</a>\n",
        "</td>\n",
        "\n",
        " <td>\n",
        "    <a target=\"_blank\" href=\"https://drive.google.com/file/d/1IWmWUJp08kVmCaLd4Ra_dJdKHCl3Qa98/view?usp=sharing\">\n",
        "    <img src=\"https://drive.google.com/uc?export=view&id=1mCoEjoX14qqcPIq221D-MB9bXAfT9d6m\" width=\"60\" height=\"70\"/>\n",
        "    Colab</a>\n",
        "  </td>\n",
        "  <td>\n",
        "    <a href=\"https://cermics.enpc.fr/~bl/decision-incertain/td-2/TD2.ipynb?refresh=echo%20rand(2,200)\"><img   src=\"https://drive.google.com/uc?export=view&id=1xxaBqICUG2bV4sXsMDfK4MR-y2Zcgd3z\" width=\"60\" height=\"70\">Télécharger le Jupyter</a>\n",
        "  </td>\n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S1987SIIoomn"
      },
      "source": [
        "# Un test d'équirépartition"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ynEWqn_soomo"
      },
      "source": [
        "import numpy as np\n",
        "import math\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "grjumT8doomo"
      },
      "source": [
        "## Etude par simulation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "49cYAEOpoomq"
      },
      "source": [
        "On commence par construire un test d'équirpartition d'une suite de\n",
        "$100$ tirages à pile ou face.\n",
        "\n",
        "On simule des tirages à pile ou face\n",
        "répétés. A partir de ce tirage on calcule le nombre de pile\n",
        "consécutifs maximum dans le vecteur."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hsm8RgEVoomq"
      },
      "source": [
        "def tirage_pf(n,p):\n",
        "    # Effectue n tirage a Pile (P) ou face (F) (1/2,1/2)\n",
        "    X=\"\"\n",
        "    for i in range(n):\n",
        "        U=random.random()\n",
        "        #DEBUTQUESTION\n",
        "        # on rajoute un pile ou un face avec proba (1/2,1/2)\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        if U <= p:\n",
        "            X=X+'P'\n",
        "        else:\n",
        "            X=X+'F'\n",
        "        #ENDREPONSE    \n",
        "    return X\n",
        "\n",
        "def max_length(U):\n",
        "# Calcule le nombre maximum de P consecutifs\n",
        "# dans la suite U\n",
        "    MAX=0;N=0;\n",
        "    for n in range(len(U)):\n",
        "        #DEBUTQUESTION\n",
        "        # nombre maximum de P consecutifs\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        if U[n]=='P':\n",
        "            N=N+1\n",
        "        else:\n",
        "            N=0\n",
        "        MAX=max(MAX,N)\n",
        "        #ENDREPONSE    \n",
        "        \n",
        "    return MAX"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kBbiZPunoomq"
      },
      "source": [
        "### Question 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IrOuWSnRoomr"
      },
      "source": [
        " Faire $1000$ tirages du nombre maximum de $P$ et en tracer un\n",
        "  histogramme.  On calcule par simulation une approximation de la loi\n",
        "  du nombre maximum de piles consecutifs (un histogramme d'un grand\n",
        "  nombre de tirages i.i.d.)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ebIDkeNVoomr"
      },
      "source": [
        "def main_1():\n",
        "    p=1.0/2.0\n",
        "    # On teste cette fonction avec N=20\n",
        "    U=tirage_pf(20,p)# 20 tirages a pile ou face 1/2,1/2\n",
        "    max_length(U)# nombre maximum de P consecutifs\n",
        "\n",
        "    # On effectue 1000 tirages avec N=100\n",
        "    N=100\n",
        "    Taille=100000 # nbre de simulation\n",
        "    X=np.zeros(Taille)\n",
        "    for i in range(Taille):\n",
        "        #DEBUTQUESTION\n",
        "        # on réalise en échantillon selon la loi \n",
        "        # du nombre maximum de P consecutifs\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        U=tirage_pf(N,p)\n",
        "        X[i]=max_length(U)\n",
        "        #ENDREPONSE    \n",
        " \n",
        "    # On fabrique l'histogramme \n",
        "    histo=np.zeros(21);\n",
        "    for i in range(21):\n",
        "        histo[i]=np.size(np.where(X==i))/(1.0*Taille)\n",
        "    # On trace cet histogramme\n",
        "    plt.bar(range(21), histo[0:21])\n",
        "    plt.xlabel('Loi de la longueur maximale pour 10 000 simulation de longueur 100')"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "LDZFrFWxooms",
        "outputId": "d9dc259c-225e-489e-8ae0-78d3f78ed744"
      },
      "source": [
        "main_1()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EDUqoExboomu"
      },
      "source": [
        "### Question 2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uIxa0bPBoomv"
      },
      "source": [
        " Montrer que le nombre de piles successifs jusqu'à l'instant courant\n",
        "  est une chaîne de Markov à valeurs dans ${\\mathbf N}$ de matrice de\n",
        "  transition $P(x,x+1)=1/2$, $P(x,0)=1/2$. Simuler et tracer de\n",
        "  trajectoires de cette chaîne."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "FP3_-daSoomv",
        "outputId": "868109b3-77e8-48e3-f00d-bc491533f2ca"
      },
      "source": [
        "def trajectoire(U):\n",
        "# On calcule la trajectoire de X\n",
        "# à partir d'un tirage U\n",
        "    X=np.zeros(len(U)+1)\n",
        "    val=0;\n",
        "    for n in range(len(U)):\n",
        "        #DEBUTQUESTION\n",
        "        # on rajoute un si on voit un pile\n",
        "        # on revient en zéro sinon\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        if U[n]=='P':\n",
        "            val=val+1\n",
        "        else:\n",
        "            val=0\n",
        "        X[n+1]=val\n",
        "        #ENDREPONSE    \n",
        "    return X;\n",
        "\n",
        "def main_2():\n",
        "    N=100\n",
        "    p=1.0/2.0 \n",
        "\n",
        "    # On trace une trajectoire\n",
        "    U=tirage_pf(N,p)\n",
        "    X=trajectoire(U)\n",
        "    plt.plot(X)\n",
        "    \n",
        "    # puis Nbre trajectoires de X\n",
        "    Nbre=0\n",
        "    for i in range(Nbre):\n",
        "        U=tirage_pf(N,p)\n",
        "        X=trajectoire(U)\n",
        "        plt.plot(X);\n",
        "    \n",
        "main_2()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s0OjHsUaoomw"
      },
      "source": [
        "# Calcul exact de la probabilité"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Lr1zpZfoomw"
      },
      "source": [
        "On va calculer exactement la probabilité de voir au moins $l$\n",
        "piles consécutifs."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W9hhHk7Toomx"
      },
      "source": [
        "### Question 3"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dtgyt1Xioomx"
      },
      "source": [
        " Calculer la matrice de transition de la chaîne arrêté en $l$,\n",
        "  l'implementer en __Python__. En déduire la probabilité d'avoir au\n",
        "  moins $l$ pile consécutifs pour $l=0,\\ldots,20$. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JdC54RHfoomx"
      },
      "source": [
        "def proba(N,l,p):\n",
        "    # Calcule la probabilite de voir au moins l piles consecutifs\n",
        "    # dans N tirages a pile (p) ou face (1-p)\n",
        "\n",
        "    # la matrice de transition de la chaîne arrêtée en l\n",
        "    # est de taille (l+1,l+1)\n",
        "    P=np.zeros((l+1,l+1)) # les indices varient de 0 à l.\n",
        "    #DEBUTQUESTION\n",
        "    #P[0:l,0]= ... # attention 0:l = 0,1,...,l-1\n",
        "    #P[0:l,1:l+1]= ... # attention 1:l+1 = 1,...,l\n",
        "    #P[l,l]= ...\n",
        "    ######  A vous de jouer  .....\n",
        "    #ENDQUESTION\n",
        "    #DEBUTREPONSE\n",
        "    P[0:l,0]=1-p\n",
        "    P[0:l,1:l+1]=p*np.eye(l)\n",
        "    P[l,l]=1\n",
        "    #ENDREPONSE    \n",
        "    \n",
        "    # Sa puissance N ième\n",
        "    PN=np.linalg.matrix_power(P,N)\n",
        "    return PN[0,l]"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mq9Tx0gGoomx",
        "outputId": "3b6f2bc2-4f1f-4cd7-b7ef-459030932802"
      },
      "source": [
        "l=5\n",
        "p=1/2\n",
        "proba(100,l,p)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8101095991963579"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6eaGQ0SZoomy"
      },
      "source": [
        "### Question 4"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xDU0oQxzoomy"
      },
      "source": [
        "Calculer la loi du nombre maximum de piles consécutifs."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BrvF-aYroomy"
      },
      "source": [
        "def calculer_loi(N,p):\n",
        "    MAXMAX=50;# a choisir assez grand (mais pas trop ...)\n",
        "    loi=np.zeros(MAXMAX+1)\n",
        "  \n",
        "    previous=1;# proba d'avoir au moins 0 pile = 1 !\n",
        "    # le support de la loi est [0,1,...,N] que l'on tronque en MAXMAX\n",
        "    for l in range(min(N,MAXMAX)+1):\n",
        "        #DEBUTQUESTION\n",
        "        # On doit calculer proba(N,l+1,p) - proba(N,l,p)\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        current=proba(N,l+1,p) # proba d'avoir au moins l+1 pile\n",
        "        loi[l]=previous - current # proba d'avoir exactement l pile\n",
        "        previous=current\n",
        "        #ENDREPONSE    \n",
        "    return loi"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Db7Fsu1Goomy"
      },
      "source": [
        "Comparer avec les simulations précédentes. Vérifier que\n",
        "  $\\P(X=3)$ est du même ordre que $\\P(X=10)$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jGy-SuVooomz"
      },
      "source": [
        "def main_3():\n",
        "    # On teste avec N=1 et N=2, p=1/2\n",
        "    # Pour N=1, 0 pile avec proba 1/2 et 1 pile avec proba 1/2\n",
        "    calculer_loi(1,1/2.0)\n",
        "    # Pour N=2, on doit trouver (1/4,1/2,1/4) pour (0,1,2)\n",
        "    calculer_loi(2,1/2.0)\n",
        "    # en principe ca marche ...\n",
        "  \n",
        "    N=100;p=1.0/2.0\n",
        "    loi=calculer_loi(N,p)\n",
        "    print('=1?',sum(loi)) # on verifie que ca somme a 1\n",
        "  \n",
        "    # dessin\n",
        "    plt.bar(range(21), loi[0:21])\n",
        "    \n",
        "    print(\"proba d'avoir 3 (ou moins) piles consécutifs: \",np.sum(loi[0:4]))\n",
        "    print(\"proba d'avoir 10 (ou plus) piles consécutifs: \",np.sum(loi[10:20]))   \n",
        "    \n",
        "    # comparaison avec les simulations\n",
        "    Taille=10000;\n",
        "    X=np.zeros(Taille);\n",
        "    # On fait 10000 tirages\n",
        "    for i in range(Taille):\n",
        "        U=tirage_pf(N,p)\n",
        "        X[i]=max_length(U)\n",
        "  \n",
        "    # on calcule l'histogramme empirique\n",
        "    histo=np.zeros(21)\n",
        "    for i in range(21):\n",
        "        histo[i]=np.size(np.where(X==i))/(1.0*Taille)\n",
        "        \n",
        "    # on regarde si l'histogramme empirique de la question 1 est proche du calcul exact\n",
        "    epsilon=np.linalg.norm(loi[0:20]-histo[0:20])\n",
        "    # epsilon doit etre \"petit\", pour bien faire il faudrait faire un\n",
        "    # test du |$\\xi^2$| pour savoir ce que \"petit\" veut dire ici.\n",
        "    print(\"epsilon = \",epsilon,\" --- petit en principe.\")"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "CdrlT_M3oomz",
        "outputId": "fd8a8977-496c-4616-b49d-afb432e6c7bd"
      },
      "source": [
        "main_3()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "=1? 0.9999999999999887\n",
            "proba d'avoir 3 (ou moins) piles consécutifs:  0.027284957701160018\n",
            "proba d'avoir 10 (ou plus) piles consécutifs:  0.044098128423184044\n",
            "epsilon =  0.008489470274691237  --- petit en principe.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8sTvcKEIoom0"
      },
      "source": [
        "# Test du critère"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pqiKGK-boom0"
      },
      "source": [
        "### Question 5"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ncrusKnYoom0"
      },
      "source": [
        "Vérifier que, pour des tirages aléatoires, le test proposé (\"obtenir un run\n",
        "plus grand que $4$\") fonctionne dans la plupart des cas (dans $97\\%$ des cas!),\n",
        "mais pas toujours."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "75d_nI2Coom1"
      },
      "source": [
        "def main_4():\n",
        "# Test du critère lorsque les tirages sont aléatoires\n",
        "# Ca marche \"souvent\" mais pas \"toujours\".\n",
        "    N=100\n",
        "    p=1/2.0\n",
        "    Taille=100\n",
        "    for i in range(Taille):  \n",
        "        U=tirage_pf(N,p);\n",
        "        if (max_length(U) >= 4) :\n",
        "            print(\"*\",end='')\n",
        "        else:\n",
        "            # Ca arrive \"rarement\" mais ca arrive 3 fois sur 100 quand même\n",
        "            print(\"!\",end='')\n"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BWn3OKCsoom1",
        "outputId": "53dfb7ec-32f5-4fb6-a609-db199646704b"
      },
      "source": [
        "main_4()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "****************************************************************************************************"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-0fJLOdeoom1"
      },
      "source": [
        "Par quelle loi peut on approximer la loi du nombre ce cas où le test ne fonctionne pas ?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wDPCn9kooom2"
      },
      "source": [
        "# Comment la loi varie t'elle en fonction de $N$ ?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_bJP0y_coom2"
      },
      "source": [
        "On regarde ce qui se passe lorsque $N$ devient grand."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R7njiR2room2"
      },
      "source": [
        "### Question 6"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7scNbBuKoom2"
      },
      "source": [
        "On va faire varier $N$ pour étudier (en fonction de $N$) la valeur $k$\n",
        "qui réalise le maximum de la probabilité d'apparition d'exactement\n",
        "$k$ piles consécutifs: on cherche le \"maximum de vraisemblance\" de la loi du \"run\n",
        "  maximum\".\n",
        "  \n",
        "On commencera par calculer la valeur réalisant le maximum et ce maximum\n",
        "pour $N=100$, $N=500$, $N=1000$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-SqQyB_ioom2"
      },
      "source": [
        "def main_5():\n",
        "# Calcul du maximum de vraisemblance de la loi \n",
        "# imax = indice du maximum,  m = le maximum\n",
        "    p=1.0/2.0;\n",
        "    print('N: [indice du maximum de vraisemblance] -> [valeur du maximum]\\n')\n",
        "    for N in [10,100,1000]:\n",
        "        loi=calculer_loi(N,p)\n",
        "        #DEBUTQUESTION\n",
        "        # Il faut calculer l'indice du maximum de vraisemblance de la loi \n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        \n",
        "        \n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        m=max(loi)\n",
        "        k=np.argmax(loi)\n",
        "        #ENDREPONSE    \n",
        "        print (N,\": \",k,' -> ',m)\n"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cPdWa96yoom2",
        "outputId": "c2839bd8-5bfe-47be-90f9-641eb08837f8"
      },
      "source": [
        "main_5()"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "N: [indice du maximum de vraisemblance] -> [valeur du maximum]\n",
            "\n",
            "10 :  2  ->  0.3515625\n",
            "100 :  5  ->  0.26401597994641224\n",
            "1000 :  9  ->  0.23879124004379715\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YHZYYcHqoom2"
      },
      "source": [
        "### Question 7"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9S0Iz91yoom3"
      },
      "source": [
        " Vérifier que la moyenne du ''run maximum'' varie presque linéairement en\n",
        "fonction de $\\log(N)$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sDMmcqC_oom3"
      },
      "source": [
        "def moyenne(loi):\n",
        "    return sum(range(np.size(loi)) * loi)\n",
        "#-------------------------------------------------------\n",
        "def main_5_bis():\n",
        "# La moyenne varie (approximativement) comme C log(N).\n",
        "# Ca peut se prouver.\n",
        "    p=1.0/2.0\n",
        "    valeurs=[10,50,100,500,1000,5000,10000]\n",
        "    x=np.zeros(np.size(valeurs))\n",
        "    y=np.zeros(np.size(valeurs))\n",
        "    i=0\n",
        "    for N in valeurs:\n",
        "        loi=calculer_loi(N,p)\n",
        "        #DEBUTQUESTION\n",
        "        # On veut tracer la courbe moyenne -> log(n)\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        \n",
        "        \n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        x[i]=math.log(N)\n",
        "        y[i]=moyenne(loi)\n",
        "        #ENDREPONSE    \n",
        "        i=i+1\n",
        "    plt.plot(x,y)"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "xzA2So_Noom3",
        "outputId": "699ebf0c-e0a1-48cf-9733-e8ad66d5b433"
      },
      "source": [
        "main_5_bis()"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3vmWVr6soom3"
      },
      "source": [
        "Ca ressemble beaucoup à une droite mais ça n'en n'est pas une !"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RAACjQhFoom4"
      },
      "source": [
        "# Calcul du prix d'une option européenne dans le modèle de Cox-Ross"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5ZBY_biPoom4"
      },
      "source": [
        "## Simulation du modèle"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RODkdX8xoom4"
      },
      "source": [
        "On considère le chaîne de Cox-Ross~:\n",
        "$$\n",
        "X_0=x_0, X_{n+1}= X_{n} \\left(u\\times\\inde{U_{n+1}=P}+d\\times\\inde{U_{n+1}=F}\\right).\n",
        "$$\n",
        "avec $N=10$, $x_0=100$, $p=1/2$, $u=1+1/N$, $d=1-1/N$.\n",
        "\n",
        "On cherche à calculer $\\E(f(X_N))$ où $f(x)=\\max(x-K,0)$ avec $K=100$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tOKJl2PToom5"
      },
      "source": [
        "### Question 8"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kPr2Zv78oom5"
      },
      "source": [
        "Simuler cette chaîne de Markov."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I-oY2rgxoom5"
      },
      "source": [
        "def simul_cox_ross(N,x_0,p,u,d):\n",
        "    U=np.random.binomial(1,p,N) # tirages a pile ou face (p,1-p)\n",
        "    X=np.zeros(np.size(U))\n",
        "    X[0]=x_0;\n",
        "    for i in range(np.size(U)-1):\n",
        "        #DEBUTQUESTION\n",
        "        # simulation d'un étape pour le processus de Cox-Ross\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        if U[i+1]==0: \n",
        "            X[i+1]=X[i]*u\n",
        "        else:\n",
        "            X[i+1]=X[i]*d\n",
        "        #ENDREPONSE\n",
        "    return X"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zCyQXfO3oom5"
      },
      "source": [
        "def main_6():\n",
        "    N=50\n",
        "    sigma=0.3\n",
        "    p=1.0/2.0;u=1.0-sigma/math.sqrt(N);d=1.0+sigma/math.sqrt(N)\n",
        "    x_0=100\n",
        "\n",
        "    X=simul_cox_ross(N,x_0,p,u,d)\n",
        "    plt.plot(X)"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "Ke7jPdJeoom5",
        "outputId": "8e05ecd9-1d92-48dd-c1f4-6be535fdc67c"
      },
      "source": [
        "main_6()\n",
        "main_6()"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RlGNHyIfoom6"
      },
      "source": [
        "##  Une version récursive de l'algorithme de calcul de prix"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Byj_IfImoom6"
      },
      "source": [
        "### Question 9"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mc5KL2LPoom7"
      },
      "source": [
        "Ecrire une version récursive de l'algorithme de calcul de prix. On recopie l'équation obtenue dans le cours.\n",
        "\n",
        "Tester l'algrithme pour $N$ petit ($N \\leq 10$). Vérifier que pour $N\\geq 20$ on risque d'attendre longtemps\n",
        "le résultat !"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "awbdh8-xoom7"
      },
      "source": [
        "K=100;\n",
        "def f(x):\n",
        "# le payoff\n",
        "    return max(x-K,0);\n",
        "#-------------------------------------------------------\n",
        "def prix_recursif(x,k,N,p,u,d):\n",
        "    if (k==N):\n",
        "        # on retourne le payoff\n",
        "        return f(x)\n",
        "    else:\n",
        "        #DEBUTQUESTION\n",
        "        # on applique l'équation de programmation dynamique ...\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        return p*prix_recursif(x*u,k+1,N,p,u,d)+(1-p)*prix_recursif(x*d,k+1,N,p,u,d)\n",
        "        #ENDREPONSE\n",
        "#-------------------------------------------------------\n",
        "def prix_slow(x,N,p,u,d):\n",
        "    return prix_recursif(x,0,N,p,u,d)"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zeIfer98oom7",
        "outputId": "3467357e-5d6a-460d-fa7f-c0cb14b690a8"
      },
      "source": [
        "N=10;\n",
        "# On choisit des paramètres pour converger \n",
        "# vers le modèle de Black et Scholes.\n",
        "sigma=0.3;\n",
        "p=1.0/2.0;d=1.0-sigma/math.sqrt(N);u=1.0+sigma/math.sqrt(N)\n",
        "x_0=100\n",
        "prix_slow(x_0,N,p,u,d)  # Recommencer avec N=20 pour savoir ce que slow veut dire !"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12.078135725435745"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b-E0qATloom7"
      },
      "source": [
        "## Une version itérative de l'algorithme de calcul de prix"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OVA2HXimoom8"
      },
      "source": [
        "### Question 10"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lff7qykSoom8"
      },
      "source": [
        " Ecrire une version efficace (itérative) de l'algorithme de calcul de prix. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ugxJi9X9oom8"
      },
      "source": [
        "def prix(x_0,N,p,u,d):\n",
        "    U=np.zeros([N+1,N+1])\n",
        "    for k in range(N+1):\n",
        "        U[N,k] = f(x_0 * pow(u,k) * pow(d,N-k))\n",
        "    for n in range(N-1,-1,-1): # le temps decroit de N-1 a 0\n",
        "        for k in range(0,n+1): # [0:n]\n",
        "            #DEBUTQUESTION\n",
        "            # progrmmation dynamique version éfficace\n",
        "        \n",
        "            ######  A vous de jouer  .....\n",
        "            #ENDQUESTION\n",
        "            #DEBUTREPONSE\n",
        "            U[n,k] = p*U[n+1,k+1]+(1-p)*U[n+1,k]\n",
        "            #ENDREPONSE\n",
        "    return U[0,0]"
      ],
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VYHpL4DToom8"
      },
      "source": [
        " Comparer le résultat des deux versions de l'algorithme."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nBsczDCJoom8",
        "outputId": "47fbace4-13b7-4a18-8a07-b2cdf56e9993"
      },
      "source": [
        "def main_7():\n",
        "    N=10\n",
        "    sigma=0.3\n",
        "    p=1.0/2.0\n",
        "    d=1.0-sigma/math.sqrt(N)\n",
        "    u=1.0+sigma/math.sqrt(N)\n",
        "    K=100.0;x_0=100.0\n",
        "\n",
        "    print(prix(x_0,N,p,u,d))\n",
        "\n",
        "    # Les deux algos font ils le même chose ?\n",
        "    # on verifie : prix_slow(x_0,N) \\approx prix(x_0,N)\n",
        "    print (\"Différence entre les 2 résultats: \", abs(prix_slow(x_0,N,p,u,d) - prix(x_0,N,p,u,d)),\"\\n\")\n",
        "\n",
        "main_7()"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "12.078135725435752\n",
            "Différence entre les 2 résultats:  7.105427357601002e-15 \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7rApi_Nvoom9"
      },
      "source": [
        "Tracer la fonction $x\\to u(0,x)$ pour $x\\in [80,120]$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "t4z6ulaYoom9",
        "outputId": "a5353d0a-30f2-4183-e90f-c47527d5003f"
      },
      "source": [
        "sigma=0.6\n",
        "N=200\n",
        "d=1-sigma/math.sqrt(N)\n",
        "u=1+sigma/math.sqrt(N)\n",
        "p=1.0/2.0;\n",
        "\n",
        "largeur=100\n",
        "vmin=50\n",
        "courbe=np.zeros(largeur+1)\n",
        "x_values=np.arange(vmin,vmin+largeur+1)\n",
        "\n",
        "n=-1;\n",
        "for x in x_values:\n",
        "    n=n+1\n",
        "    #DEBUTQUESTION\n",
        "    # tracer de la courbe x -> prix(x)\n",
        "        \n",
        "    ######  A vous de jouer  .....\n",
        "    #ENDQUESTION\n",
        "    #DEBUTREPONSE\n",
        "    courbe[n]=prix(x,N,p,u,d)\n",
        "    #ENDREPONSE\n",
        "plt.plot(x_values,courbe)\n"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f7993d8d750>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VT9LZJzVoom-"
      },
      "source": [
        "### Question 10"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hazX8hk6oom-"
      },
      "source": [
        "Que constatez vous lorsque $N$ augmente ($N=10,100,200,500$) et\n",
        "  que l'on choisit $u$ et $d$ en fonction de $N$ de la façon suivante:\n",
        "$$\n",
        "   u=1+\\frac{\\sigma}{\\sqrt{N}}\\; \\mbox{ et }\\; d=1-\\frac{\\sigma}{\\sqrt{N}}.\n",
        "$$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "D2cXOoeSoom-",
        "outputId": "0545fc83-1a47-45a6-8c75-1ebdb776e6b8"
      },
      "source": [
        "def main_8():\n",
        "# Avec cet algorithme on peut augmenter N\n",
        "# mais il faut renormaliser convenablement u et d pour\n",
        "# rester borné.\n",
        "# Essayer avec N=10,100,200,...,1000\n",
        "    sigma=0.6\n",
        "    largeur=50\n",
        "    vmin=50\n",
        "    courbe=np.zeros(largeur+1)\n",
        "    x_values=np.arange(vmin,vmin+largeur+1)\n",
        "    for N in [3,5,10,20,50,100,200]:\n",
        "        d=1-sigma/math.sqrt(N)\n",
        "        u=1+sigma/math.sqrt(N)\n",
        "        p=1.0/2.0\n",
        " \n",
        "        n=-1;\n",
        "        for x in x_values:\n",
        "            n=n+1;\n",
        "            courbe[n]=prix(x,N,p,u,d)\n",
        "        plt.plot(x_values,courbe)\n",
        "    \n",
        "    n=-1;\n",
        "    for x in x_values:\n",
        "        n=n+1\n",
        "        courbe[n]=max(x-K,0)\n",
        "    plt.plot(x_values,courbe)\n",
        "    # Ca converge, mais vers quoi ? Vous verrez ça en 2A.\n",
        "    \n",
        "main_8()\n"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "faUBY_THoom-"
      },
      "source": [
        "# Un cas plus délicat: les options sur moyenne"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UKVCk_0_oom_"
      },
      "source": [
        "On cherche maintenant à évaluer $\\E(f(S_N))$ où $S_n=X_1+\\cdots+X_n$.\n",
        "\n",
        " Pourquoi le processus $(S_n,n\\geq 0)$ n'est il pas une chaîne de\n",
        "  Markov ? Vérifier que le couple $((X_n,S_n),n\\geq 0)$ est une chaine\n",
        "  de Markov de matrice de transition ($0$ sinon)\n",
        "  $$\n",
        "  P((x,s), (xu,s+xu))=p,\\quad P((x,s), (xd,s+xd))=1-p.\n",
        "  $$\n",
        "  issue de $(x_0,0)$ à l'instant $0$.  En déduire que\n",
        "  $\\E(f(S_N))=u(0,x_0,0)$ où $u$ est la solution unique de\n",
        "  \\begin{equation}\\label{eq:rec}\n",
        "    \\left\\{\n",
        "      \\begin{array}{l}\n",
        "        u(n,x) = p u(n+1,xu,s+xu) + (1-p) u(n+1,xd,s+xd),\\quad n< N\\\\\n",
        "        u(N,x,s) = f(s),\n",
        "      \\end{array}\n",
        "    \\right.   \n",
        "  \\end{equation}\n",
        "        \n",
        "Ecrire un algorithme récursif (lent) qui résoud l'équation précédente ($N\\leq 10$!) et permet\n",
        "de calculer $\\E(f(S_N))$.      "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DucQgVJGoom_"
      },
      "source": [
        "def f_moy(x,s,N):\n",
        "    return max((s/N)-K,0)\n",
        "\n",
        "def prix_moyenne(x,s,k,N,p,u,d):\n",
        "    if (k==N):\n",
        "        return f_moy(x,s,N)\n",
        "    else:\n",
        "        #DEBUTQUESTION\n",
        "        # écrire l'équation de programmation dynamique pour ce problème\n",
        "        \n",
        "        ######  A vous de jouer  .....\n",
        "        \n",
        "        #ENDQUESTION\n",
        "        #DEBUTREPONSE\n",
        "        return p*prix_moyenne(x*u,s+x*u,k+1,N,p,u,d)+(1-p)*prix_moyenne(x*d,s+x*d,k+1,N,p,u,d)\n",
        "        #ENDREPONSE\n",
        "\n",
        "def prix_slow_moyenne(x,N,p,u,d):\n",
        "    return prix_moyenne(x,x,0,N,p,u,d)"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kdf5c3yhoom_",
        "outputId": "9a62e629-d5c5-4fd7-d671-6c9d43e83d09"
      },
      "source": [
        "def main_9():\n",
        "    N=10\n",
        "    sigma=0.3\n",
        "    p=1.0/2.0\n",
        "    d=1.0-sigma/math.sqrt(N)\n",
        "    u=1.0+sigma/math.sqrt(N)\n",
        "    x_0=100.0;K=100.0\n",
        "\n",
        "    # Ca marche mais ce n'est pas très efficace ...\n",
        "    print('Prix option sur moyenne: ',prix_slow_moyenne(x_0,N,p,u,d),'\\n')\n",
        "\n",
        "main_9()"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Prix option sur moyenne:  13.18627110107544 \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4QO6px0Room_",
        "outputId": "ef83393e-bf74-4d6f-c613-069a64b70c3a"
      },
      "source": [
        "def liste_moyenne_rec(x,s,k,N):\n",
        "# On constitue la liste des points visités par la chaine\n",
        "# à l'instant N, en partant de (x,s) à l'instant k.\n",
        "# Si un point est visité deux fois, il y figure 2 fois.\n",
        "    if (k==N):\n",
        "        liste=[]\n",
        "        liste.append([x,s])\n",
        "        return liste\n",
        "    else:\n",
        "        liste_up = liste_moyenne_rec(x*u,s+x*u,k+1,N)\n",
        "        liste_down = liste_moyenne_rec(x*d,s+x*d,k+1,N)\n",
        "        liste_up.extend(liste_down)\n",
        "        return liste_up\n",
        "    \n",
        "def liste_moyenne(x,N):\n",
        "    # On part de (x,s=x) a l'instant 0\n",
        "    return liste_moyenne_rec(x,x,0,N)\n",
        "\n",
        "def main_10():\n",
        "    x_0=100\n",
        "    N=10\n",
        "    liste=liste_moyenne(x_0,N)\n",
        "\n",
        "    # Tri des points selon les valeurs de la somme.\n",
        "    # Les valeurs de x peuvent etre egales, mais pas celle de s.\n",
        "    # Nous allons le verifier.\n",
        "    liste.sort();\n",
        "\n",
        "    # On regarde si tous les points sont differents\n",
        "    # en parcourrant le tableau ainsi classé\n",
        "    epsilon=0.00001\n",
        "    Taille=len(liste)\n",
        "    match=[]\n",
        "    for i in range(Taille-1):\n",
        "        if (np.linalg.norm(np.asarray(liste[i]) - np.asarray(liste[i+1])) < epsilon):\n",
        "            print ('Warning: (', liste[i][0],',',liste[i][1], ') ~ (',liste[i+1][0],',',liste[i+1][1],')\\n')\n",
        "            match.append([liste[i][0],liste[i][1],liste[i+1][0],liste[i+1][1]])\n",
        "                              \n",
        "    if len(match) == 0: \n",
        "        print (\"Aucun point n'est dupliqué.\\n\")\n",
        "        \n",
        "main_10()"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Aucun point n'est dupliqué.\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}